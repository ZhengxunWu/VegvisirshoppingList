// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: charlotte.proto

package com.isaacsheff.charlotte.proto;

public interface BlockOrBuilder extends
    // @@protoc_insertion_point(interface_extends:charlotte.Block)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.charlotte.AvailabilityAttestation availabilityAttestation = 1;</code>
   */
  boolean hasAvailabilityAttestation();
  /**
   * <code>.charlotte.AvailabilityAttestation availabilityAttestation = 1;</code>
   */
  com.isaacsheff.charlotte.proto.AvailabilityAttestation getAvailabilityAttestation();
  /**
   * <code>.charlotte.AvailabilityAttestation availabilityAttestation = 1;</code>
   */
  com.isaacsheff.charlotte.proto.AvailabilityAttestationOrBuilder getAvailabilityAttestationOrBuilder();

  /**
   * <code>.charlotte.IntegrityAttestation integrityAttestation = 2;</code>
   */
  boolean hasIntegrityAttestation();
  /**
   * <code>.charlotte.IntegrityAttestation integrityAttestation = 2;</code>
   */
  com.isaacsheff.charlotte.proto.IntegrityAttestation getIntegrityAttestation();
  /**
   * <code>.charlotte.IntegrityAttestation integrityAttestation = 2;</code>
   */
  com.isaacsheff.charlotte.proto.IntegrityAttestationOrBuilder getIntegrityAttestationOrBuilder();

  /**
   * <pre>
   * why not?
   * </pre>
   *
   * <code>string str = 3;</code>
   */
  java.lang.String getStr();
  /**
   * <pre>
   * why not?
   * </pre>
   *
   * <code>string str = 3;</code>
   */
  com.google.protobuf.ByteString
      getStrBytes();

  /**
   * <code>.charlotte.HetconsBlock hetconsBlock = 4;</code>
   */
  boolean hasHetconsBlock();
  /**
   * <code>.charlotte.HetconsBlock hetconsBlock = 4;</code>
   */
  com.isaacsheff.charlotte.proto.HetconsBlock getHetconsBlock();
  /**
   * <code>.charlotte.HetconsBlock hetconsBlock = 4;</code>
   */
  com.isaacsheff.charlotte.proto.HetconsBlockOrBuilder getHetconsBlockOrBuilder();

  /**
   * <code>.charlotte.SignedGitSimCommit signedGitSimCommit = 5;</code>
   */
  boolean hasSignedGitSimCommit();
  /**
   * <code>.charlotte.SignedGitSimCommit signedGitSimCommit = 5;</code>
   */
  com.isaacsheff.charlotte.proto.SignedGitSimCommit getSignedGitSimCommit();
  /**
   * <code>.charlotte.SignedGitSimCommit signedGitSimCommit = 5;</code>
   */
  com.isaacsheff.charlotte.proto.SignedGitSimCommitOrBuilder getSignedGitSimCommitOrBuilder();

  /**
   * <pre>
   * This is probably the best place for an Any type, but for now, keep it minimum
   * </pre>
   *
   * <code>.vegvisir.core.datatype.Block vegvisirBlock = 6;</code>
   */
  boolean hasVegvisirBlock();
  /**
   * <pre>
   * This is probably the best place for an Any type, but for now, keep it minimum
   * </pre>
   *
   * <code>.vegvisir.core.datatype.Block vegvisirBlock = 6;</code>
   */
  com.vegvisir.core.datatype.proto.Block getVegvisirBlock();
  /**
   * <pre>
   * This is probably the best place for an Any type, but for now, keep it minimum
   * </pre>
   *
   * <code>.vegvisir.core.datatype.Block vegvisirBlock = 6;</code>
   */
  com.vegvisir.core.datatype.proto.BlockOrBuilder getVegvisirBlockOrBuilder();

  public com.isaacsheff.charlotte.proto.Block.BlocktypeOneofCase getBlocktypeOneofCase();
}
