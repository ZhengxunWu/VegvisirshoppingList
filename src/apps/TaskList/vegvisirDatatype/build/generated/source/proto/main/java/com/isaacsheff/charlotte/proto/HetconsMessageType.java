// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hetcons.proto

package com.isaacsheff.charlotte.proto;

/**
 * <pre>
 * Main Messages
 * </pre>
 *
 * Protobuf enum {@code charlotte.HetconsMessageType}
 */
public enum HetconsMessageType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>M1a = 0;</code>
   */
  M1a(0),
  /**
   * <code>M1b = 1;</code>
   */
  M1b(1),
  /**
   * <code>M2b = 2;</code>
   */
  M2b(2),
  /**
   * <code>PROPOSAL = 3;</code>
   */
  PROPOSAL(3),
  /**
   * <code>OBSERVERGROUP = 4;</code>
   */
  OBSERVERGROUP(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>M1a = 0;</code>
   */
  public static final int M1a_VALUE = 0;
  /**
   * <code>M1b = 1;</code>
   */
  public static final int M1b_VALUE = 1;
  /**
   * <code>M2b = 2;</code>
   */
  public static final int M2b_VALUE = 2;
  /**
   * <code>PROPOSAL = 3;</code>
   */
  public static final int PROPOSAL_VALUE = 3;
  /**
   * <code>OBSERVERGROUP = 4;</code>
   */
  public static final int OBSERVERGROUP_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static HetconsMessageType valueOf(int value) {
    return forNumber(value);
  }

  public static HetconsMessageType forNumber(int value) {
    switch (value) {
      case 0: return M1a;
      case 1: return M1b;
      case 2: return M2b;
      case 3: return PROPOSAL;
      case 4: return OBSERVERGROUP;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<HetconsMessageType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      HetconsMessageType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<HetconsMessageType>() {
          public HetconsMessageType findValueByNumber(int number) {
            return HetconsMessageType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.isaacsheff.charlotte.proto.HetconsProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final HetconsMessageType[] VALUES = values();

  public static HetconsMessageType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private HetconsMessageType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:charlotte.HetconsMessageType)
}

