// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: charlotte.proto

package com.isaacsheff.charlotte.proto;

/**
 * Protobuf type {@code charlotte.SignedGitSimCommit}
 */
public  final class SignedGitSimCommit extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:charlotte.SignedGitSimCommit)
    SignedGitSimCommitOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SignedGitSimCommit.newBuilder() to construct.
  private SignedGitSimCommit(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SignedGitSimCommit() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SignedGitSimCommit(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.Builder subBuilder = null;
            if (commit_ != null) {
              subBuilder = commit_.toBuilder();
            }
            commit_ = input.readMessage(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(commit_);
              commit_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.isaacsheff.charlotte.proto.Signature.Builder subBuilder = null;
            if (signature_ != null) {
              subBuilder = signature_.toBuilder();
            }
            signature_ = input.readMessage(com.isaacsheff.charlotte.proto.Signature.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(signature_);
              signature_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.isaacsheff.charlotte.proto.SignedGitSimCommit.class, com.isaacsheff.charlotte.proto.SignedGitSimCommit.Builder.class);
  }

  public interface GitSimCommitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:charlotte.SignedGitSimCommit.GitSimCommit)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string comment = 1;</code>
     */
    java.lang.String getComment();
    /**
     * <code>string comment = 1;</code>
     */
    com.google.protobuf.ByteString
        getCommentBytes();

    /**
     * <code>.charlotte.Hash hash = 2;</code>
     */
    boolean hasHash();
    /**
     * <code>.charlotte.Hash hash = 2;</code>
     */
    com.isaacsheff.charlotte.proto.Hash getHash();
    /**
     * <code>.charlotte.Hash hash = 2;</code>
     */
    com.isaacsheff.charlotte.proto.HashOrBuilder getHashOrBuilder();

    /**
     * <code>bytes initialCommit = 3;</code>
     */
    com.google.protobuf.ByteString getInitialCommit();

    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
     */
    boolean hasParents();
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
     */
    com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents getParents();
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
     */
    com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParentsOrBuilder getParentsOrBuilder();

    public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.CommitOneofCase getCommitOneofCase();
  }
  /**
   * Protobuf type {@code charlotte.SignedGitSimCommit.GitSimCommit}
   */
  public  static final class GitSimCommit extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:charlotte.SignedGitSimCommit.GitSimCommit)
      GitSimCommitOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GitSimCommit.newBuilder() to construct.
    private GitSimCommit(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GitSimCommit() {
      comment_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GitSimCommit(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              comment_ = s;
              break;
            }
            case 18: {
              com.isaacsheff.charlotte.proto.Hash.Builder subBuilder = null;
              if (hash_ != null) {
                subBuilder = hash_.toBuilder();
              }
              hash_ = input.readMessage(com.isaacsheff.charlotte.proto.Hash.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hash_);
                hash_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              commitOneofCase_ = 3;
              commitOneof_ = input.readBytes();
              break;
            }
            case 34: {
              com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.Builder subBuilder = null;
              if (commitOneofCase_ == 4) {
                subBuilder = ((com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) commitOneof_).toBuilder();
              }
              commitOneof_ =
                  input.readMessage(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) commitOneof_);
                commitOneof_ = subBuilder.buildPartial();
              }
              commitOneofCase_ = 4;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.class, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.Builder.class);
    }

    public interface GitSimParentsOrBuilder extends
        // @@protoc_insertion_point(interface_extends:charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
       */
      java.util.List<com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent> 
          getParentList();
      /**
       * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
       */
      com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent getParent(int index);
      /**
       * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
       */
      int getParentCount();
      /**
       * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
       */
      java.util.List<? extends com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParentOrBuilder> 
          getParentOrBuilderList();
      /**
       * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
       */
      com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParentOrBuilder getParentOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents}
     */
    public  static final class GitSimParents extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents)
        GitSimParentsOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use GitSimParents.newBuilder() to construct.
      private GitSimParents(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private GitSimParents() {
        parent_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private GitSimParents(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  parent_ = new java.util.ArrayList<com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent>();
                  mutable_bitField0_ |= 0x00000001;
                }
                parent_.add(
                    input.readMessage(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.parser(), extensionRegistry));
                break;
              }
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            parent_ = java.util.Collections.unmodifiableList(parent_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_GitSimParents_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_GitSimParents_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.class, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.Builder.class);
      }

      public interface GitSimParentOrBuilder extends
          // @@protoc_insertion_point(interface_extends:charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.charlotte.Reference parentCommit = 1;</code>
         */
        boolean hasParentCommit();
        /**
         * <code>.charlotte.Reference parentCommit = 1;</code>
         */
        com.isaacsheff.charlotte.proto.Reference getParentCommit();
        /**
         * <code>.charlotte.Reference parentCommit = 1;</code>
         */
        com.isaacsheff.charlotte.proto.ReferenceOrBuilder getParentCommitOrBuilder();

        /**
         * <code>bytes diff = 2;</code>
         */
        com.google.protobuf.ByteString getDiff();
      }
      /**
       * Protobuf type {@code charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent}
       */
      public  static final class GitSimParent extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent)
          GitSimParentOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use GitSimParent.newBuilder() to construct.
        private GitSimParent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private GitSimParent() {
          diff_ = com.google.protobuf.ByteString.EMPTY;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private GitSimParent(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  com.isaacsheff.charlotte.proto.Reference.Builder subBuilder = null;
                  if (parentCommit_ != null) {
                    subBuilder = parentCommit_.toBuilder();
                  }
                  parentCommit_ = input.readMessage(com.isaacsheff.charlotte.proto.Reference.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(parentCommit_);
                    parentCommit_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 18: {

                  diff_ = input.readBytes();
                  break;
                }
                default: {
                  if (!parseUnknownFieldProto3(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_GitSimParents_GitSimParent_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_GitSimParents_GitSimParent_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.class, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.Builder.class);
        }

        public static final int PARENTCOMMIT_FIELD_NUMBER = 1;
        private com.isaacsheff.charlotte.proto.Reference parentCommit_;
        /**
         * <code>.charlotte.Reference parentCommit = 1;</code>
         */
        public boolean hasParentCommit() {
          return parentCommit_ != null;
        }
        /**
         * <code>.charlotte.Reference parentCommit = 1;</code>
         */
        public com.isaacsheff.charlotte.proto.Reference getParentCommit() {
          return parentCommit_ == null ? com.isaacsheff.charlotte.proto.Reference.getDefaultInstance() : parentCommit_;
        }
        /**
         * <code>.charlotte.Reference parentCommit = 1;</code>
         */
        public com.isaacsheff.charlotte.proto.ReferenceOrBuilder getParentCommitOrBuilder() {
          return getParentCommit();
        }

        public static final int DIFF_FIELD_NUMBER = 2;
        private com.google.protobuf.ByteString diff_;
        /**
         * <code>bytes diff = 2;</code>
         */
        public com.google.protobuf.ByteString getDiff() {
          return diff_;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (parentCommit_ != null) {
            output.writeMessage(1, getParentCommit());
          }
          if (!diff_.isEmpty()) {
            output.writeBytes(2, diff_);
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (parentCommit_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(1, getParentCommit());
          }
          if (!diff_.isEmpty()) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(2, diff_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent)) {
            return super.equals(obj);
          }
          com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent other = (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent) obj;

          boolean result = true;
          result = result && (hasParentCommit() == other.hasParentCommit());
          if (hasParentCommit()) {
            result = result && getParentCommit()
                .equals(other.getParentCommit());
          }
          result = result && getDiff()
              .equals(other.getDiff());
          result = result && unknownFields.equals(other.unknownFields);
          return result;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasParentCommit()) {
            hash = (37 * hash) + PARENTCOMMIT_FIELD_NUMBER;
            hash = (53 * hash) + getParentCommit().hashCode();
          }
          hash = (37 * hash) + DIFF_FIELD_NUMBER;
          hash = (53 * hash) + getDiff().hashCode();
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent)
            com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParentOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_GitSimParents_GitSimParent_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_GitSimParents_GitSimParent_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.class, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.Builder.class);
          }

          // Construct using com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            if (parentCommitBuilder_ == null) {
              parentCommit_ = null;
            } else {
              parentCommit_ = null;
              parentCommitBuilder_ = null;
            }
            diff_ = com.google.protobuf.ByteString.EMPTY;

            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_GitSimParents_GitSimParent_descriptor;
          }

          @java.lang.Override
          public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent getDefaultInstanceForType() {
            return com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.getDefaultInstance();
          }

          @java.lang.Override
          public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent build() {
            com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent buildPartial() {
            com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent result = new com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent(this);
            if (parentCommitBuilder_ == null) {
              result.parentCommit_ = parentCommit_;
            } else {
              result.parentCommit_ = parentCommitBuilder_.build();
            }
            result.diff_ = diff_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return (Builder) super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent) {
              return mergeFrom((com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent other) {
            if (other == com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.getDefaultInstance()) return this;
            if (other.hasParentCommit()) {
              mergeParentCommit(other.getParentCommit());
            }
            if (other.getDiff() != com.google.protobuf.ByteString.EMPTY) {
              setDiff(other.getDiff());
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }

          private com.isaacsheff.charlotte.proto.Reference parentCommit_ = null;
          private com.google.protobuf.SingleFieldBuilderV3<
              com.isaacsheff.charlotte.proto.Reference, com.isaacsheff.charlotte.proto.Reference.Builder, com.isaacsheff.charlotte.proto.ReferenceOrBuilder> parentCommitBuilder_;
          /**
           * <code>.charlotte.Reference parentCommit = 1;</code>
           */
          public boolean hasParentCommit() {
            return parentCommitBuilder_ != null || parentCommit_ != null;
          }
          /**
           * <code>.charlotte.Reference parentCommit = 1;</code>
           */
          public com.isaacsheff.charlotte.proto.Reference getParentCommit() {
            if (parentCommitBuilder_ == null) {
              return parentCommit_ == null ? com.isaacsheff.charlotte.proto.Reference.getDefaultInstance() : parentCommit_;
            } else {
              return parentCommitBuilder_.getMessage();
            }
          }
          /**
           * <code>.charlotte.Reference parentCommit = 1;</code>
           */
          public Builder setParentCommit(com.isaacsheff.charlotte.proto.Reference value) {
            if (parentCommitBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              parentCommit_ = value;
              onChanged();
            } else {
              parentCommitBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <code>.charlotte.Reference parentCommit = 1;</code>
           */
          public Builder setParentCommit(
              com.isaacsheff.charlotte.proto.Reference.Builder builderForValue) {
            if (parentCommitBuilder_ == null) {
              parentCommit_ = builderForValue.build();
              onChanged();
            } else {
              parentCommitBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <code>.charlotte.Reference parentCommit = 1;</code>
           */
          public Builder mergeParentCommit(com.isaacsheff.charlotte.proto.Reference value) {
            if (parentCommitBuilder_ == null) {
              if (parentCommit_ != null) {
                parentCommit_ =
                  com.isaacsheff.charlotte.proto.Reference.newBuilder(parentCommit_).mergeFrom(value).buildPartial();
              } else {
                parentCommit_ = value;
              }
              onChanged();
            } else {
              parentCommitBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <code>.charlotte.Reference parentCommit = 1;</code>
           */
          public Builder clearParentCommit() {
            if (parentCommitBuilder_ == null) {
              parentCommit_ = null;
              onChanged();
            } else {
              parentCommit_ = null;
              parentCommitBuilder_ = null;
            }

            return this;
          }
          /**
           * <code>.charlotte.Reference parentCommit = 1;</code>
           */
          public com.isaacsheff.charlotte.proto.Reference.Builder getParentCommitBuilder() {
            
            onChanged();
            return getParentCommitFieldBuilder().getBuilder();
          }
          /**
           * <code>.charlotte.Reference parentCommit = 1;</code>
           */
          public com.isaacsheff.charlotte.proto.ReferenceOrBuilder getParentCommitOrBuilder() {
            if (parentCommitBuilder_ != null) {
              return parentCommitBuilder_.getMessageOrBuilder();
            } else {
              return parentCommit_ == null ?
                  com.isaacsheff.charlotte.proto.Reference.getDefaultInstance() : parentCommit_;
            }
          }
          /**
           * <code>.charlotte.Reference parentCommit = 1;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              com.isaacsheff.charlotte.proto.Reference, com.isaacsheff.charlotte.proto.Reference.Builder, com.isaacsheff.charlotte.proto.ReferenceOrBuilder> 
              getParentCommitFieldBuilder() {
            if (parentCommitBuilder_ == null) {
              parentCommitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  com.isaacsheff.charlotte.proto.Reference, com.isaacsheff.charlotte.proto.Reference.Builder, com.isaacsheff.charlotte.proto.ReferenceOrBuilder>(
                      getParentCommit(),
                      getParentForChildren(),
                      isClean());
              parentCommit_ = null;
            }
            return parentCommitBuilder_;
          }

          private com.google.protobuf.ByteString diff_ = com.google.protobuf.ByteString.EMPTY;
          /**
           * <code>bytes diff = 2;</code>
           */
          public com.google.protobuf.ByteString getDiff() {
            return diff_;
          }
          /**
           * <code>bytes diff = 2;</code>
           */
          public Builder setDiff(com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            diff_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>bytes diff = 2;</code>
           */
          public Builder clearDiff() {
            
            diff_ = getDefaultInstance().getDiff();
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFieldsProto3(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent)
        }

        // @@protoc_insertion_point(class_scope:charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent)
        private static final com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent();
        }

        public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GitSimParent>
            PARSER = new com.google.protobuf.AbstractParser<GitSimParent>() {
          @java.lang.Override
          public GitSimParent parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new GitSimParent(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<GitSimParent> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GitSimParent> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public static final int PARENT_FIELD_NUMBER = 1;
      private java.util.List<com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent> parent_;
      /**
       * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
       */
      public java.util.List<com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent> getParentList() {
        return parent_;
      }
      /**
       * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
       */
      public java.util.List<? extends com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParentOrBuilder> 
          getParentOrBuilderList() {
        return parent_;
      }
      /**
       * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
       */
      public int getParentCount() {
        return parent_.size();
      }
      /**
       * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
       */
      public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent getParent(int index) {
        return parent_.get(index);
      }
      /**
       * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
       */
      public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParentOrBuilder getParentOrBuilder(
          int index) {
        return parent_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        for (int i = 0; i < parent_.size(); i++) {
          output.writeMessage(1, parent_.get(i));
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        for (int i = 0; i < parent_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, parent_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents)) {
          return super.equals(obj);
        }
        com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents other = (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) obj;

        boolean result = true;
        result = result && getParentList()
            .equals(other.getParentList());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getParentCount() > 0) {
          hash = (37 * hash) + PARENT_FIELD_NUMBER;
          hash = (53 * hash) + getParentList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents)
          com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParentsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_GitSimParents_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_GitSimParents_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.class, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.Builder.class);
        }

        // Construct using com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getParentFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (parentBuilder_ == null) {
            parent_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            parentBuilder_.clear();
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_GitSimParents_descriptor;
        }

        @java.lang.Override
        public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents getDefaultInstanceForType() {
          return com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.getDefaultInstance();
        }

        @java.lang.Override
        public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents build() {
          com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents buildPartial() {
          com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents result = new com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents(this);
          int from_bitField0_ = bitField0_;
          if (parentBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
              parent_ = java.util.Collections.unmodifiableList(parent_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.parent_ = parent_;
          } else {
            result.parent_ = parentBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return (Builder) super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) {
            return mergeFrom((com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents other) {
          if (other == com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.getDefaultInstance()) return this;
          if (parentBuilder_ == null) {
            if (!other.parent_.isEmpty()) {
              if (parent_.isEmpty()) {
                parent_ = other.parent_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureParentIsMutable();
                parent_.addAll(other.parent_);
              }
              onChanged();
            }
          } else {
            if (!other.parent_.isEmpty()) {
              if (parentBuilder_.isEmpty()) {
                parentBuilder_.dispose();
                parentBuilder_ = null;
                parent_ = other.parent_;
                bitField0_ = (bitField0_ & ~0x00000001);
                parentBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getParentFieldBuilder() : null;
              } else {
                parentBuilder_.addAllMessages(other.parent_);
              }
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.util.List<com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent> parent_ =
          java.util.Collections.emptyList();
        private void ensureParentIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            parent_ = new java.util.ArrayList<com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent>(parent_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.Builder, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParentOrBuilder> parentBuilder_;

        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public java.util.List<com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent> getParentList() {
          if (parentBuilder_ == null) {
            return java.util.Collections.unmodifiableList(parent_);
          } else {
            return parentBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public int getParentCount() {
          if (parentBuilder_ == null) {
            return parent_.size();
          } else {
            return parentBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent getParent(int index) {
          if (parentBuilder_ == null) {
            return parent_.get(index);
          } else {
            return parentBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public Builder setParent(
            int index, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent value) {
          if (parentBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureParentIsMutable();
            parent_.set(index, value);
            onChanged();
          } else {
            parentBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public Builder setParent(
            int index, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.Builder builderForValue) {
          if (parentBuilder_ == null) {
            ensureParentIsMutable();
            parent_.set(index, builderForValue.build());
            onChanged();
          } else {
            parentBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public Builder addParent(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent value) {
          if (parentBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureParentIsMutable();
            parent_.add(value);
            onChanged();
          } else {
            parentBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public Builder addParent(
            int index, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent value) {
          if (parentBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureParentIsMutable();
            parent_.add(index, value);
            onChanged();
          } else {
            parentBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public Builder addParent(
            com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.Builder builderForValue) {
          if (parentBuilder_ == null) {
            ensureParentIsMutable();
            parent_.add(builderForValue.build());
            onChanged();
          } else {
            parentBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public Builder addParent(
            int index, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.Builder builderForValue) {
          if (parentBuilder_ == null) {
            ensureParentIsMutable();
            parent_.add(index, builderForValue.build());
            onChanged();
          } else {
            parentBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public Builder addAllParent(
            java.lang.Iterable<? extends com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent> values) {
          if (parentBuilder_ == null) {
            ensureParentIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, parent_);
            onChanged();
          } else {
            parentBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public Builder clearParent() {
          if (parentBuilder_ == null) {
            parent_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            parentBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public Builder removeParent(int index) {
          if (parentBuilder_ == null) {
            ensureParentIsMutable();
            parent_.remove(index);
            onChanged();
          } else {
            parentBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.Builder getParentBuilder(
            int index) {
          return getParentFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParentOrBuilder getParentOrBuilder(
            int index) {
          if (parentBuilder_ == null) {
            return parent_.get(index);  } else {
            return parentBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public java.util.List<? extends com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParentOrBuilder> 
             getParentOrBuilderList() {
          if (parentBuilder_ != null) {
            return parentBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(parent_);
          }
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.Builder addParentBuilder() {
          return getParentFieldBuilder().addBuilder(
              com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.getDefaultInstance());
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.Builder addParentBuilder(
            int index) {
          return getParentFieldBuilder().addBuilder(
              index, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.getDefaultInstance());
        }
        /**
         * <code>repeated .charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent parent = 1;</code>
         */
        public java.util.List<com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.Builder> 
             getParentBuilderList() {
          return getParentFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.Builder, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParentOrBuilder> 
            getParentFieldBuilder() {
          if (parentBuilder_ == null) {
            parentBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParent.Builder, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.GitSimParentOrBuilder>(
                    parent_,
                    ((bitField0_ & 0x00000001) == 0x00000001),
                    getParentForChildren(),
                    isClean());
            parent_ = null;
          }
          return parentBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents)
      }

      // @@protoc_insertion_point(class_scope:charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents)
      private static final com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents();
      }

      public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<GitSimParents>
          PARSER = new com.google.protobuf.AbstractParser<GitSimParents>() {
        @java.lang.Override
        public GitSimParents parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new GitSimParents(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<GitSimParents> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<GitSimParents> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int commitOneofCase_ = 0;
    private java.lang.Object commitOneof_;
    public enum CommitOneofCase
        implements com.google.protobuf.Internal.EnumLite {
      INITIALCOMMIT(3),
      PARENTS(4),
      COMMITONEOF_NOT_SET(0);
      private final int value;
      private CommitOneofCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CommitOneofCase valueOf(int value) {
        return forNumber(value);
      }

      public static CommitOneofCase forNumber(int value) {
        switch (value) {
          case 3: return INITIALCOMMIT;
          case 4: return PARENTS;
          case 0: return COMMITONEOF_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public CommitOneofCase
    getCommitOneofCase() {
      return CommitOneofCase.forNumber(
          commitOneofCase_);
    }

    public static final int COMMENT_FIELD_NUMBER = 1;
    private volatile java.lang.Object comment_;
    /**
     * <code>string comment = 1;</code>
     */
    public java.lang.String getComment() {
      java.lang.Object ref = comment_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        comment_ = s;
        return s;
      }
    }
    /**
     * <code>string comment = 1;</code>
     */
    public com.google.protobuf.ByteString
        getCommentBytes() {
      java.lang.Object ref = comment_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        comment_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HASH_FIELD_NUMBER = 2;
    private com.isaacsheff.charlotte.proto.Hash hash_;
    /**
     * <code>.charlotte.Hash hash = 2;</code>
     */
    public boolean hasHash() {
      return hash_ != null;
    }
    /**
     * <code>.charlotte.Hash hash = 2;</code>
     */
    public com.isaacsheff.charlotte.proto.Hash getHash() {
      return hash_ == null ? com.isaacsheff.charlotte.proto.Hash.getDefaultInstance() : hash_;
    }
    /**
     * <code>.charlotte.Hash hash = 2;</code>
     */
    public com.isaacsheff.charlotte.proto.HashOrBuilder getHashOrBuilder() {
      return getHash();
    }

    public static final int INITIALCOMMIT_FIELD_NUMBER = 3;
    /**
     * <code>bytes initialCommit = 3;</code>
     */
    public com.google.protobuf.ByteString getInitialCommit() {
      if (commitOneofCase_ == 3) {
        return (com.google.protobuf.ByteString) commitOneof_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }

    public static final int PARENTS_FIELD_NUMBER = 4;
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
     */
    public boolean hasParents() {
      return commitOneofCase_ == 4;
    }
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
     */
    public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents getParents() {
      if (commitOneofCase_ == 4) {
         return (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) commitOneof_;
      }
      return com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.getDefaultInstance();
    }
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
     */
    public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParentsOrBuilder getParentsOrBuilder() {
      if (commitOneofCase_ == 4) {
         return (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) commitOneof_;
      }
      return com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getCommentBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, comment_);
      }
      if (hash_ != null) {
        output.writeMessage(2, getHash());
      }
      if (commitOneofCase_ == 3) {
        output.writeBytes(
            3, (com.google.protobuf.ByteString) commitOneof_);
      }
      if (commitOneofCase_ == 4) {
        output.writeMessage(4, (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) commitOneof_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getCommentBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, comment_);
      }
      if (hash_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getHash());
      }
      if (commitOneofCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              3, (com.google.protobuf.ByteString) commitOneof_);
      }
      if (commitOneofCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) commitOneof_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit)) {
        return super.equals(obj);
      }
      com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit other = (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit) obj;

      boolean result = true;
      result = result && getComment()
          .equals(other.getComment());
      result = result && (hasHash() == other.hasHash());
      if (hasHash()) {
        result = result && getHash()
            .equals(other.getHash());
      }
      result = result && getCommitOneofCase().equals(
          other.getCommitOneofCase());
      if (!result) return false;
      switch (commitOneofCase_) {
        case 3:
          result = result && getInitialCommit()
              .equals(other.getInitialCommit());
          break;
        case 4:
          result = result && getParents()
              .equals(other.getParents());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COMMENT_FIELD_NUMBER;
      hash = (53 * hash) + getComment().hashCode();
      if (hasHash()) {
        hash = (37 * hash) + HASH_FIELD_NUMBER;
        hash = (53 * hash) + getHash().hashCode();
      }
      switch (commitOneofCase_) {
        case 3:
          hash = (37 * hash) + INITIALCOMMIT_FIELD_NUMBER;
          hash = (53 * hash) + getInitialCommit().hashCode();
          break;
        case 4:
          hash = (37 * hash) + PARENTS_FIELD_NUMBER;
          hash = (53 * hash) + getParents().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code charlotte.SignedGitSimCommit.GitSimCommit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:charlotte.SignedGitSimCommit.GitSimCommit)
        com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommitOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.class, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.Builder.class);
      }

      // Construct using com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        comment_ = "";

        if (hashBuilder_ == null) {
          hash_ = null;
        } else {
          hash_ = null;
          hashBuilder_ = null;
        }
        commitOneofCase_ = 0;
        commitOneof_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_GitSimCommit_descriptor;
      }

      @java.lang.Override
      public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit getDefaultInstanceForType() {
        return com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.getDefaultInstance();
      }

      @java.lang.Override
      public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit build() {
        com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit buildPartial() {
        com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit result = new com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit(this);
        result.comment_ = comment_;
        if (hashBuilder_ == null) {
          result.hash_ = hash_;
        } else {
          result.hash_ = hashBuilder_.build();
        }
        if (commitOneofCase_ == 3) {
          result.commitOneof_ = commitOneof_;
        }
        if (commitOneofCase_ == 4) {
          if (parentsBuilder_ == null) {
            result.commitOneof_ = commitOneof_;
          } else {
            result.commitOneof_ = parentsBuilder_.build();
          }
        }
        result.commitOneofCase_ = commitOneofCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit) {
          return mergeFrom((com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit other) {
        if (other == com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.getDefaultInstance()) return this;
        if (!other.getComment().isEmpty()) {
          comment_ = other.comment_;
          onChanged();
        }
        if (other.hasHash()) {
          mergeHash(other.getHash());
        }
        switch (other.getCommitOneofCase()) {
          case INITIALCOMMIT: {
            setInitialCommit(other.getInitialCommit());
            break;
          }
          case PARENTS: {
            mergeParents(other.getParents());
            break;
          }
          case COMMITONEOF_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int commitOneofCase_ = 0;
      private java.lang.Object commitOneof_;
      public CommitOneofCase
          getCommitOneofCase() {
        return CommitOneofCase.forNumber(
            commitOneofCase_);
      }

      public Builder clearCommitOneof() {
        commitOneofCase_ = 0;
        commitOneof_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object comment_ = "";
      /**
       * <code>string comment = 1;</code>
       */
      public java.lang.String getComment() {
        java.lang.Object ref = comment_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          comment_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string comment = 1;</code>
       */
      public com.google.protobuf.ByteString
          getCommentBytes() {
        java.lang.Object ref = comment_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          comment_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string comment = 1;</code>
       */
      public Builder setComment(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        comment_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string comment = 1;</code>
       */
      public Builder clearComment() {
        
        comment_ = getDefaultInstance().getComment();
        onChanged();
        return this;
      }
      /**
       * <code>string comment = 1;</code>
       */
      public Builder setCommentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        comment_ = value;
        onChanged();
        return this;
      }

      private com.isaacsheff.charlotte.proto.Hash hash_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.isaacsheff.charlotte.proto.Hash, com.isaacsheff.charlotte.proto.Hash.Builder, com.isaacsheff.charlotte.proto.HashOrBuilder> hashBuilder_;
      /**
       * <code>.charlotte.Hash hash = 2;</code>
       */
      public boolean hasHash() {
        return hashBuilder_ != null || hash_ != null;
      }
      /**
       * <code>.charlotte.Hash hash = 2;</code>
       */
      public com.isaacsheff.charlotte.proto.Hash getHash() {
        if (hashBuilder_ == null) {
          return hash_ == null ? com.isaacsheff.charlotte.proto.Hash.getDefaultInstance() : hash_;
        } else {
          return hashBuilder_.getMessage();
        }
      }
      /**
       * <code>.charlotte.Hash hash = 2;</code>
       */
      public Builder setHash(com.isaacsheff.charlotte.proto.Hash value) {
        if (hashBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hash_ = value;
          onChanged();
        } else {
          hashBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.charlotte.Hash hash = 2;</code>
       */
      public Builder setHash(
          com.isaacsheff.charlotte.proto.Hash.Builder builderForValue) {
        if (hashBuilder_ == null) {
          hash_ = builderForValue.build();
          onChanged();
        } else {
          hashBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.charlotte.Hash hash = 2;</code>
       */
      public Builder mergeHash(com.isaacsheff.charlotte.proto.Hash value) {
        if (hashBuilder_ == null) {
          if (hash_ != null) {
            hash_ =
              com.isaacsheff.charlotte.proto.Hash.newBuilder(hash_).mergeFrom(value).buildPartial();
          } else {
            hash_ = value;
          }
          onChanged();
        } else {
          hashBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.charlotte.Hash hash = 2;</code>
       */
      public Builder clearHash() {
        if (hashBuilder_ == null) {
          hash_ = null;
          onChanged();
        } else {
          hash_ = null;
          hashBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.charlotte.Hash hash = 2;</code>
       */
      public com.isaacsheff.charlotte.proto.Hash.Builder getHashBuilder() {
        
        onChanged();
        return getHashFieldBuilder().getBuilder();
      }
      /**
       * <code>.charlotte.Hash hash = 2;</code>
       */
      public com.isaacsheff.charlotte.proto.HashOrBuilder getHashOrBuilder() {
        if (hashBuilder_ != null) {
          return hashBuilder_.getMessageOrBuilder();
        } else {
          return hash_ == null ?
              com.isaacsheff.charlotte.proto.Hash.getDefaultInstance() : hash_;
        }
      }
      /**
       * <code>.charlotte.Hash hash = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.isaacsheff.charlotte.proto.Hash, com.isaacsheff.charlotte.proto.Hash.Builder, com.isaacsheff.charlotte.proto.HashOrBuilder> 
          getHashFieldBuilder() {
        if (hashBuilder_ == null) {
          hashBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.isaacsheff.charlotte.proto.Hash, com.isaacsheff.charlotte.proto.Hash.Builder, com.isaacsheff.charlotte.proto.HashOrBuilder>(
                  getHash(),
                  getParentForChildren(),
                  isClean());
          hash_ = null;
        }
        return hashBuilder_;
      }

      /**
       * <code>bytes initialCommit = 3;</code>
       */
      public com.google.protobuf.ByteString getInitialCommit() {
        if (commitOneofCase_ == 3) {
          return (com.google.protobuf.ByteString) commitOneof_;
        }
        return com.google.protobuf.ByteString.EMPTY;
      }
      /**
       * <code>bytes initialCommit = 3;</code>
       */
      public Builder setInitialCommit(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  commitOneofCase_ = 3;
        commitOneof_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes initialCommit = 3;</code>
       */
      public Builder clearInitialCommit() {
        if (commitOneofCase_ == 3) {
          commitOneofCase_ = 0;
          commitOneof_ = null;
          onChanged();
        }
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.Builder, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParentsOrBuilder> parentsBuilder_;
      /**
       * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
       */
      public boolean hasParents() {
        return commitOneofCase_ == 4;
      }
      /**
       * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
       */
      public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents getParents() {
        if (parentsBuilder_ == null) {
          if (commitOneofCase_ == 4) {
            return (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) commitOneof_;
          }
          return com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.getDefaultInstance();
        } else {
          if (commitOneofCase_ == 4) {
            return parentsBuilder_.getMessage();
          }
          return com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.getDefaultInstance();
        }
      }
      /**
       * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
       */
      public Builder setParents(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents value) {
        if (parentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          commitOneof_ = value;
          onChanged();
        } else {
          parentsBuilder_.setMessage(value);
        }
        commitOneofCase_ = 4;
        return this;
      }
      /**
       * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
       */
      public Builder setParents(
          com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.Builder builderForValue) {
        if (parentsBuilder_ == null) {
          commitOneof_ = builderForValue.build();
          onChanged();
        } else {
          parentsBuilder_.setMessage(builderForValue.build());
        }
        commitOneofCase_ = 4;
        return this;
      }
      /**
       * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
       */
      public Builder mergeParents(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents value) {
        if (parentsBuilder_ == null) {
          if (commitOneofCase_ == 4 &&
              commitOneof_ != com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.getDefaultInstance()) {
            commitOneof_ = com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.newBuilder((com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) commitOneof_)
                .mergeFrom(value).buildPartial();
          } else {
            commitOneof_ = value;
          }
          onChanged();
        } else {
          if (commitOneofCase_ == 4) {
            parentsBuilder_.mergeFrom(value);
          }
          parentsBuilder_.setMessage(value);
        }
        commitOneofCase_ = 4;
        return this;
      }
      /**
       * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
       */
      public Builder clearParents() {
        if (parentsBuilder_ == null) {
          if (commitOneofCase_ == 4) {
            commitOneofCase_ = 0;
            commitOneof_ = null;
            onChanged();
          }
        } else {
          if (commitOneofCase_ == 4) {
            commitOneofCase_ = 0;
            commitOneof_ = null;
          }
          parentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
       */
      public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.Builder getParentsBuilder() {
        return getParentsFieldBuilder().getBuilder();
      }
      /**
       * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
       */
      public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParentsOrBuilder getParentsOrBuilder() {
        if ((commitOneofCase_ == 4) && (parentsBuilder_ != null)) {
          return parentsBuilder_.getMessageOrBuilder();
        } else {
          if (commitOneofCase_ == 4) {
            return (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) commitOneof_;
          }
          return com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.getDefaultInstance();
        }
      }
      /**
       * <code>.charlotte.SignedGitSimCommit.GitSimCommit.GitSimParents parents = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.Builder, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParentsOrBuilder> 
          getParentsFieldBuilder() {
        if (parentsBuilder_ == null) {
          if (!(commitOneofCase_ == 4)) {
            commitOneof_ = com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.getDefaultInstance();
          }
          parentsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents.Builder, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParentsOrBuilder>(
                  (com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.GitSimParents) commitOneof_,
                  getParentForChildren(),
                  isClean());
          commitOneof_ = null;
        }
        commitOneofCase_ = 4;
        onChanged();;
        return parentsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:charlotte.SignedGitSimCommit.GitSimCommit)
    }

    // @@protoc_insertion_point(class_scope:charlotte.SignedGitSimCommit.GitSimCommit)
    private static final com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit();
    }

    public static com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GitSimCommit>
        PARSER = new com.google.protobuf.AbstractParser<GitSimCommit>() {
      @java.lang.Override
      public GitSimCommit parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GitSimCommit(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GitSimCommit> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GitSimCommit> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int COMMIT_FIELD_NUMBER = 1;
  private com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit commit_;
  /**
   * <code>.charlotte.SignedGitSimCommit.GitSimCommit commit = 1;</code>
   */
  public boolean hasCommit() {
    return commit_ != null;
  }
  /**
   * <code>.charlotte.SignedGitSimCommit.GitSimCommit commit = 1;</code>
   */
  public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit getCommit() {
    return commit_ == null ? com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.getDefaultInstance() : commit_;
  }
  /**
   * <code>.charlotte.SignedGitSimCommit.GitSimCommit commit = 1;</code>
   */
  public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommitOrBuilder getCommitOrBuilder() {
    return getCommit();
  }

  public static final int SIGNATURE_FIELD_NUMBER = 2;
  private com.isaacsheff.charlotte.proto.Signature signature_;
  /**
   * <code>.charlotte.Signature signature = 2;</code>
   */
  public boolean hasSignature() {
    return signature_ != null;
  }
  /**
   * <code>.charlotte.Signature signature = 2;</code>
   */
  public com.isaacsheff.charlotte.proto.Signature getSignature() {
    return signature_ == null ? com.isaacsheff.charlotte.proto.Signature.getDefaultInstance() : signature_;
  }
  /**
   * <code>.charlotte.Signature signature = 2;</code>
   */
  public com.isaacsheff.charlotte.proto.SignatureOrBuilder getSignatureOrBuilder() {
    return getSignature();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (commit_ != null) {
      output.writeMessage(1, getCommit());
    }
    if (signature_ != null) {
      output.writeMessage(2, getSignature());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (commit_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCommit());
    }
    if (signature_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getSignature());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.isaacsheff.charlotte.proto.SignedGitSimCommit)) {
      return super.equals(obj);
    }
    com.isaacsheff.charlotte.proto.SignedGitSimCommit other = (com.isaacsheff.charlotte.proto.SignedGitSimCommit) obj;

    boolean result = true;
    result = result && (hasCommit() == other.hasCommit());
    if (hasCommit()) {
      result = result && getCommit()
          .equals(other.getCommit());
    }
    result = result && (hasSignature() == other.hasSignature());
    if (hasSignature()) {
      result = result && getSignature()
          .equals(other.getSignature());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCommit()) {
      hash = (37 * hash) + COMMIT_FIELD_NUMBER;
      hash = (53 * hash) + getCommit().hashCode();
    }
    if (hasSignature()) {
      hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
      hash = (53 * hash) + getSignature().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.isaacsheff.charlotte.proto.SignedGitSimCommit prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code charlotte.SignedGitSimCommit}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:charlotte.SignedGitSimCommit)
      com.isaacsheff.charlotte.proto.SignedGitSimCommitOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.isaacsheff.charlotte.proto.SignedGitSimCommit.class, com.isaacsheff.charlotte.proto.SignedGitSimCommit.Builder.class);
    }

    // Construct using com.isaacsheff.charlotte.proto.SignedGitSimCommit.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (commitBuilder_ == null) {
        commit_ = null;
      } else {
        commit_ = null;
        commitBuilder_ = null;
      }
      if (signatureBuilder_ == null) {
        signature_ = null;
      } else {
        signature_ = null;
        signatureBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.isaacsheff.charlotte.proto.CharlotteProto.internal_static_charlotte_SignedGitSimCommit_descriptor;
    }

    @java.lang.Override
    public com.isaacsheff.charlotte.proto.SignedGitSimCommit getDefaultInstanceForType() {
      return com.isaacsheff.charlotte.proto.SignedGitSimCommit.getDefaultInstance();
    }

    @java.lang.Override
    public com.isaacsheff.charlotte.proto.SignedGitSimCommit build() {
      com.isaacsheff.charlotte.proto.SignedGitSimCommit result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.isaacsheff.charlotte.proto.SignedGitSimCommit buildPartial() {
      com.isaacsheff.charlotte.proto.SignedGitSimCommit result = new com.isaacsheff.charlotte.proto.SignedGitSimCommit(this);
      if (commitBuilder_ == null) {
        result.commit_ = commit_;
      } else {
        result.commit_ = commitBuilder_.build();
      }
      if (signatureBuilder_ == null) {
        result.signature_ = signature_;
      } else {
        result.signature_ = signatureBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.isaacsheff.charlotte.proto.SignedGitSimCommit) {
        return mergeFrom((com.isaacsheff.charlotte.proto.SignedGitSimCommit)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.isaacsheff.charlotte.proto.SignedGitSimCommit other) {
      if (other == com.isaacsheff.charlotte.proto.SignedGitSimCommit.getDefaultInstance()) return this;
      if (other.hasCommit()) {
        mergeCommit(other.getCommit());
      }
      if (other.hasSignature()) {
        mergeSignature(other.getSignature());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.isaacsheff.charlotte.proto.SignedGitSimCommit parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.isaacsheff.charlotte.proto.SignedGitSimCommit) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit commit_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.Builder, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommitOrBuilder> commitBuilder_;
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit commit = 1;</code>
     */
    public boolean hasCommit() {
      return commitBuilder_ != null || commit_ != null;
    }
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit commit = 1;</code>
     */
    public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit getCommit() {
      if (commitBuilder_ == null) {
        return commit_ == null ? com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.getDefaultInstance() : commit_;
      } else {
        return commitBuilder_.getMessage();
      }
    }
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit commit = 1;</code>
     */
    public Builder setCommit(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit value) {
      if (commitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commit_ = value;
        onChanged();
      } else {
        commitBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit commit = 1;</code>
     */
    public Builder setCommit(
        com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.Builder builderForValue) {
      if (commitBuilder_ == null) {
        commit_ = builderForValue.build();
        onChanged();
      } else {
        commitBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit commit = 1;</code>
     */
    public Builder mergeCommit(com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit value) {
      if (commitBuilder_ == null) {
        if (commit_ != null) {
          commit_ =
            com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.newBuilder(commit_).mergeFrom(value).buildPartial();
        } else {
          commit_ = value;
        }
        onChanged();
      } else {
        commitBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit commit = 1;</code>
     */
    public Builder clearCommit() {
      if (commitBuilder_ == null) {
        commit_ = null;
        onChanged();
      } else {
        commit_ = null;
        commitBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit commit = 1;</code>
     */
    public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.Builder getCommitBuilder() {
      
      onChanged();
      return getCommitFieldBuilder().getBuilder();
    }
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit commit = 1;</code>
     */
    public com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommitOrBuilder getCommitOrBuilder() {
      if (commitBuilder_ != null) {
        return commitBuilder_.getMessageOrBuilder();
      } else {
        return commit_ == null ?
            com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.getDefaultInstance() : commit_;
      }
    }
    /**
     * <code>.charlotte.SignedGitSimCommit.GitSimCommit commit = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.Builder, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommitOrBuilder> 
        getCommitFieldBuilder() {
      if (commitBuilder_ == null) {
        commitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommit.Builder, com.isaacsheff.charlotte.proto.SignedGitSimCommit.GitSimCommitOrBuilder>(
                getCommit(),
                getParentForChildren(),
                isClean());
        commit_ = null;
      }
      return commitBuilder_;
    }

    private com.isaacsheff.charlotte.proto.Signature signature_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.isaacsheff.charlotte.proto.Signature, com.isaacsheff.charlotte.proto.Signature.Builder, com.isaacsheff.charlotte.proto.SignatureOrBuilder> signatureBuilder_;
    /**
     * <code>.charlotte.Signature signature = 2;</code>
     */
    public boolean hasSignature() {
      return signatureBuilder_ != null || signature_ != null;
    }
    /**
     * <code>.charlotte.Signature signature = 2;</code>
     */
    public com.isaacsheff.charlotte.proto.Signature getSignature() {
      if (signatureBuilder_ == null) {
        return signature_ == null ? com.isaacsheff.charlotte.proto.Signature.getDefaultInstance() : signature_;
      } else {
        return signatureBuilder_.getMessage();
      }
    }
    /**
     * <code>.charlotte.Signature signature = 2;</code>
     */
    public Builder setSignature(com.isaacsheff.charlotte.proto.Signature value) {
      if (signatureBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        signature_ = value;
        onChanged();
      } else {
        signatureBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.charlotte.Signature signature = 2;</code>
     */
    public Builder setSignature(
        com.isaacsheff.charlotte.proto.Signature.Builder builderForValue) {
      if (signatureBuilder_ == null) {
        signature_ = builderForValue.build();
        onChanged();
      } else {
        signatureBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.charlotte.Signature signature = 2;</code>
     */
    public Builder mergeSignature(com.isaacsheff.charlotte.proto.Signature value) {
      if (signatureBuilder_ == null) {
        if (signature_ != null) {
          signature_ =
            com.isaacsheff.charlotte.proto.Signature.newBuilder(signature_).mergeFrom(value).buildPartial();
        } else {
          signature_ = value;
        }
        onChanged();
      } else {
        signatureBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.charlotte.Signature signature = 2;</code>
     */
    public Builder clearSignature() {
      if (signatureBuilder_ == null) {
        signature_ = null;
        onChanged();
      } else {
        signature_ = null;
        signatureBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.charlotte.Signature signature = 2;</code>
     */
    public com.isaacsheff.charlotte.proto.Signature.Builder getSignatureBuilder() {
      
      onChanged();
      return getSignatureFieldBuilder().getBuilder();
    }
    /**
     * <code>.charlotte.Signature signature = 2;</code>
     */
    public com.isaacsheff.charlotte.proto.SignatureOrBuilder getSignatureOrBuilder() {
      if (signatureBuilder_ != null) {
        return signatureBuilder_.getMessageOrBuilder();
      } else {
        return signature_ == null ?
            com.isaacsheff.charlotte.proto.Signature.getDefaultInstance() : signature_;
      }
    }
    /**
     * <code>.charlotte.Signature signature = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.isaacsheff.charlotte.proto.Signature, com.isaacsheff.charlotte.proto.Signature.Builder, com.isaacsheff.charlotte.proto.SignatureOrBuilder> 
        getSignatureFieldBuilder() {
      if (signatureBuilder_ == null) {
        signatureBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.isaacsheff.charlotte.proto.Signature, com.isaacsheff.charlotte.proto.Signature.Builder, com.isaacsheff.charlotte.proto.SignatureOrBuilder>(
                getSignature(),
                getParentForChildren(),
                isClean());
        signature_ = null;
      }
      return signatureBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:charlotte.SignedGitSimCommit)
  }

  // @@protoc_insertion_point(class_scope:charlotte.SignedGitSimCommit)
  private static final com.isaacsheff.charlotte.proto.SignedGitSimCommit DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.isaacsheff.charlotte.proto.SignedGitSimCommit();
  }

  public static com.isaacsheff.charlotte.proto.SignedGitSimCommit getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SignedGitSimCommit>
      PARSER = new com.google.protobuf.AbstractParser<SignedGitSimCommit>() {
    @java.lang.Override
    public SignedGitSimCommit parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SignedGitSimCommit(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SignedGitSimCommit> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SignedGitSimCommit> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.isaacsheff.charlotte.proto.SignedGitSimCommit getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

